<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DK的博客</title>
  <subtitle>我所想要的，大概只有我自己的双手能够创造！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-21T09:29:21.245Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>牛 涛</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>没那么难，往前看 </title>
    <link href="http://yoursite.com/2016/11/21/di-yi-pian/"/>
    <id>http://yoursite.com/2016/11/21/di-yi-pian/</id>
    <published>2016-11-21T08:43:22.000Z</published>
    <updated>2016-11-21T09:29:21.245Z</updated>
    
    <content type="html"><![CDATA[<p></p><h1> 程序员的准则</h1><br>     <p> 技术是通向解决方案的桥梁，但是技术不是解决方案</p><br>我们可以被最新的技术所吸引，例如angularjs的依赖注入，例如最炫酷的编程语言，例如最炫酷的操作系统。但是他们都不是解决问题的具体方案，他们只不过是我们手中帮助解决问题的简单工具。<p></p>
<p>我们要小心，不要被人引入语言圣战，也不要轻易地就说“PHP是最好的语言”，他们只不过是解决问题的工具而已。</p>
<pre><code>&lt;p&gt; 聪明的代码和清晰的代码不可兼得&lt;/p&gt;
</code></pre><p>在编写代码事，我们应当将尽力的编写容易读的代码，毕竟我们的代码是要给人看的，顺便给机器执行。<br>容易理解的代码的价值比含义不清的代码的价值要大得多，无论那些所谓的“聪明的代码”到底有多聪明。<br>不确切的说，但是大多数情况下，清晰的代码和聪明的代码不可兼得。</p>
<p>当我们做一些自以为聪明的事情的时候尤其要牢记这点。当然能做到代码既清晰易懂又有精妙的实现方式是再好不过的了。</p>
<p>推荐读物：程序员的职业素养 英文版</p>
<pre><code>&lt;p&gt;只有在有必要写代码的时候才写代码&lt;/p&gt;
</code></pre><p>这个看起来有点矛盾，因为程序员的工作就是写代码。当然，确实有点矛盾。</p>
<p>我们的工作包括写代码，但是我们应当尽可能的通过尽量少的代码解决问题。这并不意味着用$p取代$pw或者$password、也不意味着用function f()取代function func_get_args(),只应该表示我们应该尽量只写必须要、实现功能的代码。</p>
<p>经常的情况是我们会为了应付各种不同的情况而添加很多的代码来实现整个系统的“鲁棒性”和“灵活性”，但是更多的情况下是我们想了那么多的将来的可能，但是其实将来未必就有那么多的可能性。而且代码未必会有那么好的效果，大多数情况下，尤其是维护的时候，那些多余的代码会非常讨厌。</p>
<p>简而言之，不要过度设计，也不要写不必要的代码。孔子删《诗》、《书》，好的软件工程师只保留必要的代码，其余的全部删掉。</p>
<pre><code>&lt;p&gt;注释未必都是好的&lt;/p&gt;
</code></pre><p>我并不喜欢写代码注释，我的同事Bob Martin的意见是：”当你写注释的时候，你应该对自己的表达能力感到失望、同时对自己小学没有学好语文感到深深的愧疚。“（本句出自上面那本《程序员的职业素养》，原话是“Every time you write a comment, you should grimace and feel the failure of your ability of expression.”）</p>
<p>我写这一段的目的并不是想说注释是没必要的，而是很多时候都可以避免注释一些一看就懂的东西、也没必要留下长篇大段的注释，而应该把有限的时间交给无限的代码事业。</p>
<p>只有那些无法从变量名或者函数名中得知意义、无法清晰地在代码中表达出来的东西才有必要写注释。例如，因为下层架构中的某些特性或者BUG，注释有必要记录代码中故意规避这些BUG的手段。</p>
<p>注释有时候并不仅仅是邪恶的，因为他们确实有用，但是有时候注释也不一定是正确的。例如：最新的代码和过期的注释便会将你引入歧途。（原文的含义基本在说不要写注释，而且态度是”我就不写注释，不服来打我啊“。）</p>
<pre><code>&lt;p&gt;写代码之前要明确目的&lt;/p&gt;
</code></pre><p>这条是显而易见的，但是很多人都做不到。很多时候坐下来写代码，有时候完全不知道自己的目的到底是要做什么，例如 X-Y problem。</p>
<p>我承认我也经常忘记自己要做什么，所以这条对我来说非常重要。</p>
<p>在这里Practicing test driven development (TDD) 有很大的用处，但是有时候它的帮助也不大。所以尽量明确自己的目标和必须要实现的功能之后再去写代码。</p>
<pre><code>&lt;p&gt;在提交代码之前测试代码&lt;/p&gt;
</code></pre><p>不要等到同行评审或者其他测试的时候才发现你的代码的错误，这是在浪费时间。</p>
<p>在提交你的代码之前，花几分钟测试一下。当然你不会可能在测试之前发现所有的问题，但是仍旧能发现很多我们通常都会犯的错误。很多开发者认为这是测试的工作，其实这是每个人的工作。毕竟你也要浪费时间修复代码。</p>
<pre><code>&lt;p&gt;学到老活到老&lt;/p&gt;
</code></pre><p>每个人都会不断地忘掉原来的东西，相对于原来的状态，如果你没有不断的学习，那么你就是在退步。况且，学习新东西耗费的时间并不长。每天尝试花十五分钟去读本书，我的就是这样做的。</p>
<p>每天学点东西会极大地提升你将来的可能性。除此之外，现如今的技术变化如此之快，如果不去学习新的技术，你会很快被时代所抛弃。</p>
<p>Node.js发展的这么快，谁知道明天是不是HTML也被移植到server-side了。</p>
<pre><code>&lt;p&gt;快乐编程&lt;/p&gt;
</code></pre><p>成为一名程序员的原因可能不是因为收入。没有工作比医生或者律师收入更高，何以琛江景房什么的，但是你成为程序员的原因可能就是因为你喜欢写代码。</p>
<p>所以，坚持下去，不要把自己的爱好变成负担。</p>
<p>也许你忘了你的初心，但是下一个项目开始前记住，你的爱好本来就是写代码，甚至还有人愿意为你的爱好付钱呢。</p>
<pre><code>&lt;p&gt;你不太能学会所有的东西&lt;/p&gt;
</code></pre><p>学得越多，知道的越多，知道的越多，不知道的越多，不知道的越多，知道的越少，为什么学来着。</p>
<p>我们确实不太可能学会所有的东西，所以也不要奢求自己学会全部的东西。有些人可能会忘记这一点，于是他们什么都学，PHP，JS，JSP，SHELL，嵌入式，前端，后台，单片机，你知道的，你不知道的，他们都想学。</p>
<p>在不知道的时候就应当问别人他们的方法、经验，这并不是一件坏事，学道有先后，术业有专攻，如是而已。</p>
<p>大多数情况下，我们只需要在一个方面成为专家，但不需要在所有方面成为专家。我们可以深入了解某些相关的东西，但是没必要去刻意精通他们。这会省下很多的时间。</p>
<p>例如调试PHP，我们可以学strace，学gdb调试php，去看PHP源码，但是我们没必要去”精通“汇编，没必要去了解操作系统的底层实现。</p>
<p>参考资料：学会学习</p>
<pre><code>&lt;p&gt;最佳的情况是看情况&lt;/p&gt;
</code></pre><p>PHP是最好的语言吗？<br>JSON是最好的数据交换格式吗？<br>我们应该在前端使用AngularJS, Ember 或 Backbone 吗？<br>我们应该在后端使用Rails，Node 或 Java 吗？<br>我们应该选用哪种编程语言进行开发？<br>我们需要开发移动版吗？<br>我们需要使用Fackbook认证登录吗？<br>所有的回答都应该是”看情况“。</p>
<p>最佳的原则就是看情况<br>如何技术选型 —— 这看情况而定<br>     永远要努力简单<br>所有的问题都有解决方案，但是最优雅的方案往往是最简单的。</p>
<p>简单并不是容易，达到简单通常需要做很多的工作。把事情搞定很容易，但是达到返璞归真的境界就比较困难了。</p>
<p>所有的人都能用复杂的方式解决问题，但是想让问题的解决方案变得简单、可靠，就需要很大的努力了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;h1&gt; 程序员的准则&lt;/h1&gt;&lt;br&gt;     &lt;p&gt; 技术是通向解决方案的桥梁，但是技术不是解决方案&lt;/p&gt;&lt;br&gt;我们可以被最新的技术所吸引，例如angularjs的依赖注入，例如最炫酷的编程语言，例如最炫酷的操作系统。但是他们都不是解决问题的具体方案，他们只
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/11/21/hello-world/"/>
    <id>http://yoursite.com/2016/11/21/hello-world/</id>
    <published>2016-11-21T07:14:03.079Z</published>
    <updated>2016-11-21T09:15:55.339Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
